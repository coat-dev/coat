// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@coat/template-ts-package template verification - babel compiler 1`] = `
".babelrc
====
{
  "presets": [
    "@babel/preset-typescript",
    [
      "@babel/preset-env",
      {
        "targets": {
          "node": "14.15"
        }
      }
    ]
  ]
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 2`] = `
".eslintrc
====
{
  "env": {
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "overrides": [
    {
      "env": {
        "jest": true
      },
      "files": ["*.test.ts"],
      "globals": {
        "fail": true
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 3`] = `
".gitignore
====
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Coat local files
/.coat

# Build outputs
/build
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 4`] = `
"README.md
====
# test-project
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 5`] = `
"coat.json
====
{"name":"test-project"}"
`;

exports[`@coat/template-ts-package template verification - babel compiler 6`] = `
"coat.lock
====
dependencies:
  devDependencies:
    - "@babel/cli"
    - "@babel/core"
    - "@babel/preset-env"
    - "@babel/preset-typescript"
    - "@types/jest"
    - "@typescript-eslint/eslint-plugin"
    - "@typescript-eslint/parser"
    - eslint
    - eslint-config-prettier
    - jest
    - prettier
    - rimraf
    - typescript
files:
  - hash: >-
      7jF6ezi/wTKgt8gWGzu15+tf6MFbU13aRFMpy16Lm+0LtcrxwNPNAteI3WBq2CeJTUnxAVGxG5u7QEanYb4dAg==
    path: .babelrc
  - hash: >-
      n1uS6ajZMpOfiWQhE24L1oIsASvT63ay5GkxYOiYFBgF2SiwUbHQVMxdtPq9a5KyBtaZkpUtk7A/9frYkb1nzw==
    path: .eslintrc
  - hash: >-
      fxSZnVg1JXiEGv1w/4+1LpWhyUWeFgVRnyX8grd7X6S0JOseqVFI+GZS4O8s7QGhF0D2c/RfzdmEEbCDjdrbcw==
    path: .gitignore
  - hash: >-
      6fDXx5wX1+d9RmNSmtfrsG7eWWfRSlnslEtaHXQGtMScNHIMVrhy0FW2ZdaqNaxQ21B+L4q1zKVGTt/4OWBJFg==
    path: jest.config.json
  - once: true
    path: README.md
  - once: true
    path: src/index.test.ts
  - once: true
    path: src/index.ts
  - hash: >-
      dEjl1diD30UVpPa+Eqopj6sUzG4fZFuRB3Yw9DRQMnrlFJzFralwcjSjCph7gJT89UmQiE/UO6zwaoKB7e5jEA==
    path: tsconfig.build.json
  - hash: >-
      6YFvblFqeBeE4Sl4dyD16Aq57hb3DhclUSJldMKVrYpFenrXNTQoERqXjAqBBYklgaLXeodtlD2IbJ8GLgGhFg==
    path: tsconfig.json
scripts:
  - build
  - build:babel
  - build:typedefs
  - lint
  - lint:eslint
  - lint:prettier
  - lint:types
  - prebuild
  - test
version: 1
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 7`] = `
"jest.config.json
====
{
  "collectCoverage": true,
  "collectCoverageFrom": ["src/**/*.ts"],
  "coverageReporters": ["text"],
  "modulePathIgnorePatterns": ["<rootDir>/build"]
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 8`] = `
"package.json
====
{
  "devDependencies": {
    "@babel/cli": "^7.12.1",
    "@babel/core": "^7.12.3",
    "@babel/preset-env": "^7.12.1",
    "@babel/preset-typescript": "^7.12.1",
    "@types/jest": "^28.1.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.1",
    "eslint-config-prettier": "^8.1.0",
    "jest": "^29.0.0",
    "prettier": "^2.2.0",
    "rimraf": "^3.0.2",
    "typescript": "~4.7.2"
  },
  "files": [
    "build/"
  ],
  "scripts": {
    "build": "coat run build:*",
    "build:babel": "babel src -d build --extensions \\".ts\\" --ignore \\"**/*.test.ts\\"",
    "build:typedefs": "tsc -p tsconfig.build.json",
    "lint": "coat run lint:*",
    "lint:eslint": "eslint --ext .ts --max-warnings 0 src",
    "lint:prettier": "prettier --check src",
    "lint:types": "tsc",
    "prebuild": "rimraf build",
    "test": "jest"
  }
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 9`] = `
"src/index.test.ts
====
import { hello } from ".";

describe("index", () => {
  // TODO: Write your first tests

  test("hello should return Hello World", () => {
    expect(hello()).toBe("Hello World");
  });
});
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 10`] = `
"src/index.ts
====
export function hello(): string {
  // TODO: Add your code in the src folder
  return "Hello World";
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 11`] = `
"tsconfig.build.json
====
{
  "compilerOptions": {
    "declaration": true,
    "emitDeclarationOnly": true,
    "isolatedModules": false,
    "noEmit": false
  },
  "exclude": ["**/**/*.test.ts"],
  "extends": "./tsconfig.json",
  "include": ["src"]
}
"
`;

exports[`@coat/template-ts-package template verification - babel compiler 12`] = `
"tsconfig.json
====
{
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "lib": ["DOM", "ES5", "ScriptHost", "ES2020"],
    "module": "commonjs",
    "moduleResolution": "node",
    "noEmit": true,
    "outDir": "build",
    "strict": true,
    "target": "ESNext"
  }
}
"
`;

exports[`@coat/template-ts-package template verification - default config 1`] = `
".eslintrc
====
{
  "env": {
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "overrides": [
    {
      "env": {
        "jest": true
      },
      "files": ["*.test.ts"],
      "globals": {
        "fail": true
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true
}
"
`;

exports[`@coat/template-ts-package template verification - default config 2`] = `
".gitignore
====
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Coat local files
/.coat

# Build outputs
/build
"
`;

exports[`@coat/template-ts-package template verification - default config 3`] = `
"README.md
====
# test-project
"
`;

exports[`@coat/template-ts-package template verification - default config 4`] = `
"coat.json
====
{"name":"test-project"}"
`;

exports[`@coat/template-ts-package template verification - default config 5`] = `
"coat.lock
====
dependencies:
  devDependencies:
    - "@types/jest"
    - "@typescript-eslint/eslint-plugin"
    - "@typescript-eslint/parser"
    - eslint
    - eslint-config-prettier
    - jest
    - prettier
    - rimraf
    - ts-jest
    - typescript
files:
  - hash: >-
      n1uS6ajZMpOfiWQhE24L1oIsASvT63ay5GkxYOiYFBgF2SiwUbHQVMxdtPq9a5KyBtaZkpUtk7A/9frYkb1nzw==
    path: .eslintrc
  - hash: >-
      fxSZnVg1JXiEGv1w/4+1LpWhyUWeFgVRnyX8grd7X6S0JOseqVFI+GZS4O8s7QGhF0D2c/RfzdmEEbCDjdrbcw==
    path: .gitignore
  - hash: >-
      7sMiOmK0ZjcQbCxHzfFGC2/K/52PLB7N/HqEEsJLtiaPkDX/JkFR6irQ62zJVaGwHF75gMsYyMhiOdzSvFR7hA==
    path: jest.config.json
  - once: true
    path: README.md
  - once: true
    path: src/index.test.ts
  - once: true
    path: src/index.ts
  - hash: >-
      zN51ATJNBuF7EqPvKtnvN8DjhfuWBsojjSkOl2y67qI9j8LmkNmsh0DBkLk3qDJm8dQ025+bGUNNfZBmxx81Gg==
    path: tsconfig.build.json
  - hash: >-
      JJeYU1HPTvwmHwyN4lSNtinTFSfil9g5qBI1G4iq3U+n4xMoqbT3Um6d7IPZkp6fNWpb4k6JmJdbj6U1DGTO4w==
    path: tsconfig.json
scripts:
  - build
  - lint
  - lint:eslint
  - lint:prettier
  - lint:types
  - prebuild
  - test
version: 1
"
`;

exports[`@coat/template-ts-package template verification - default config 6`] = `
"jest.config.json
====
{
  "collectCoverage": true,
  "collectCoverageFrom": ["src/**/*.ts"],
  "coverageReporters": ["text"],
  "modulePathIgnorePatterns": ["<rootDir>/build"],
  "preset": "ts-jest"
}
"
`;

exports[`@coat/template-ts-package template verification - default config 7`] = `
"package.json
====
{
  "devDependencies": {
    "@types/jest": "^28.1.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.1",
    "eslint-config-prettier": "^8.1.0",
    "jest": "^29.0.0",
    "prettier": "^2.2.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^28.0.0",
    "typescript": "~4.7.2"
  },
  "files": [
    "build/"
  ],
  "scripts": {
    "build": "tsc -p tsconfig.build.json",
    "lint": "coat run lint:*",
    "lint:eslint": "eslint --ext .ts --max-warnings 0 src",
    "lint:prettier": "prettier --check src",
    "lint:types": "tsc",
    "prebuild": "rimraf build",
    "test": "jest"
  }
}
"
`;

exports[`@coat/template-ts-package template verification - default config 8`] = `
"src/index.test.ts
====
import { hello } from ".";

describe("index", () => {
  // TODO: Write your first tests

  test("hello should return Hello World", () => {
    expect(hello()).toBe("Hello World");
  });
});
"
`;

exports[`@coat/template-ts-package template verification - default config 9`] = `
"src/index.ts
====
export function hello(): string {
  // TODO: Add your code in the src folder
  return "Hello World";
}
"
`;

exports[`@coat/template-ts-package template verification - default config 10`] = `
"tsconfig.build.json
====
{
  "compilerOptions": {
    "declaration": true,
    "noEmit": false
  },
  "exclude": ["**/**/*.test.ts"],
  "extends": "./tsconfig.json",
  "include": ["src"]
}
"
`;

exports[`@coat/template-ts-package template verification - default config 11`] = `
"tsconfig.json
====
{
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "lib": ["DOM", "ES5", "ScriptHost", "ES2020"],
    "module": "commonjs",
    "moduleResolution": "node",
    "noEmit": true,
    "outDir": "build",
    "strict": true,
    "target": "ES2019"
  }
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 1`] = `
".eslintrc
====
{
  "env": {
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "overrides": [
    {
      "env": {
        "jest": true
      },
      "files": ["*.test.ts"],
      "globals": {
        "fail": true
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 2`] = `
".gitignore
====
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Coat local files
/.coat

# Build outputs
/build
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 3`] = `
"README.md
====
# test-project
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 4`] = `
"coat.json
====
{"name":"test-project"}"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 5`] = `
"coat.lock
====
dependencies:
  devDependencies:
    - "@types/jest"
    - "@typescript-eslint/eslint-plugin"
    - "@typescript-eslint/parser"
    - eslint
    - eslint-config-prettier
    - jest
    - prettier
    - rimraf
    - ts-jest
    - typescript
files:
  - hash: >-
      n1uS6ajZMpOfiWQhE24L1oIsASvT63ay5GkxYOiYFBgF2SiwUbHQVMxdtPq9a5KyBtaZkpUtk7A/9frYkb1nzw==
    path: .eslintrc
  - hash: >-
      fxSZnVg1JXiEGv1w/4+1LpWhyUWeFgVRnyX8grd7X6S0JOseqVFI+GZS4O8s7QGhF0D2c/RfzdmEEbCDjdrbcw==
    path: .gitignore
  - hash: >-
      7sMiOmK0ZjcQbCxHzfFGC2/K/52PLB7N/HqEEsJLtiaPkDX/JkFR6irQ62zJVaGwHF75gMsYyMhiOdzSvFR7hA==
    path: jest.config.json
  - once: true
    path: README.md
  - once: true
    path: src/index.test.ts
  - once: true
    path: src/index.ts
  - hash: >-
      zN51ATJNBuF7EqPvKtnvN8DjhfuWBsojjSkOl2y67qI9j8LmkNmsh0DBkLk3qDJm8dQ025+bGUNNfZBmxx81Gg==
    path: tsconfig.build.json
  - hash: >-
      JJeYU1HPTvwmHwyN4lSNtinTFSfil9g5qBI1G4iq3U+n4xMoqbT3Um6d7IPZkp6fNWpb4k6JmJdbj6U1DGTO4w==
    path: tsconfig.json
scripts:
  - build
  - lint
  - lint:eslint
  - lint:prettier
  - lint:types
  - prebuild
  - test
version: 1
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 6`] = `
"jest.config.json
====
{
  "collectCoverage": true,
  "collectCoverageFrom": ["src/**/*.ts"],
  "coverageReporters": ["text"],
  "modulePathIgnorePatterns": ["<rootDir>/build"],
  "preset": "ts-jest"
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 7`] = `
"package.json
====
{
  "devDependencies": {
    "@types/jest": "^28.1.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.1",
    "eslint-config-prettier": "^8.1.0",
    "jest": "^29.0.0",
    "prettier": "^2.2.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^28.0.0",
    "typescript": "~4.7.2"
  },
  "files": [
    "build/"
  ],
  "scripts": {
    "build": "tsc -p tsconfig.build.json",
    "lint": "coat run lint:*",
    "lint:eslint": "eslint --ext .ts --max-warnings 0 src",
    "lint:prettier": "prettier --check src",
    "lint:types": "tsc",
    "prebuild": "rimraf build",
    "test": "jest"
  }
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 8`] = `
"src/index.test.ts
====
import { hello } from ".";

describe("index", () => {
  // TODO: Write your first tests

  test("hello should return Hello World", () => {
    expect(hello()).toBe("Hello World");
  });
});
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 9`] = `
"src/index.ts
====
export function hello(): string {
  // TODO: Add your code in the src folder
  return "Hello World";
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 10`] = `
"tsconfig.build.json
====
{
  "compilerOptions": {
    "declaration": true,
    "noEmit": false
  },
  "exclude": ["**/**/*.test.ts"],
  "extends": "./tsconfig.json",
  "include": ["src"]
}
"
`;

exports[`@coat/template-ts-package template verification - typescript compiler 11`] = `
"tsconfig.json
====
{
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "lib": ["DOM", "ES5", "ScriptHost", "ES2020"],
    "module": "commonjs",
    "moduleResolution": "node",
    "noEmit": true,
    "outDir": "build",
    "strict": true,
    "target": "ES2019"
  }
}
"
`;
