import difference from "lodash/difference";
import { CoatContext } from "../types/coat-context";
import {
  CoatGlobalLockfileStrict,
  CoatLocalLockfileStrict,
  CoatLockfileFileEntry,
} from "../types/coat-lockfiles";
import { getNormalizedFilePath } from "../util/get-normalized-file-path";

/**
 * Returns files that are no longer managed by the current coat project.
 *
 * This can happen in cases where the coat project configuration changes and
 * a file that has been generated previously is no longer generated by coat.
 *
 * Example: When switching the build tool configuration from tool A to tool B,
 * the configuration file for tool A "tool-a.config" is no longer a part of the
 * generated files and should be removed from the current project.
 *
 * @param newFiles The files that will be generated from the current context
 * @param currentLockfile The current lockfile that has been generated from a previous execution
 * @param context The context of the current coat project
 */
export function getUnmanagedFiles(
  newFiles: CoatLockfileFileEntry[],
  currentLockfile: CoatGlobalLockfileStrict | CoatLocalLockfileStrict,
  context: CoatContext
): string[] {
  // Get all files that are in the old lockfile
  // but no longer in the new lockfile. This means they
  // have been added previously by coat, but are no longer
  // generated by this project.
  const unmanagedFiles = difference(
    currentLockfile.files.filter((file) => !file.once).map((file) => file.path),
    newFiles.filter((file) => !file.once).map((file) => file.path)
  );

  // Normalize and retrieve the absolute file paths of
  // the unmanaged files to be able to delete them without
  // relying on the process's current working directory
  return unmanagedFiles.map((filePath) =>
    getNormalizedFilePath(filePath, context)
  );
}
