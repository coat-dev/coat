import boxen from "boxen";
import chalk from "chalk";
import wrapAnsi from "wrap-ansi";
import jsonColorizer from "json-colorizer";
import { centerText } from "../ui/center-text";
import {
  getUsableTerminalSize,
  TerminalSize,
} from "../ui/get-usable-terminal-size";
import { fillLastLine } from "../ui/fill-last-line";

/**
 * Prints getting started guidance for the customization of the generated
 * coat files.
 *
 * On tiny terminal sizes, no help text is printed since it would overwhelm
 * the terminal log.
 */
export function printCreateCustomizationHelp(): void {
  const usableTerminalSize = getUsableTerminalSize(process.stdout);

  // Don't print any customization help if the terminal window is tiny
  if (usableTerminalSize.size === TerminalSize.Tiny) {
    return;
  }

  // prettier-ignore
  const customizationExplanation = [
    chalk`Files that are generated by {cyan coat} will be continuously kept up to date via your {cyan coat} template.`,
    chalk`This means that you can't edit these files directly, because they will be overwritten when running {cyan coat sync}.`,
    "",
    chalk`However, {cyan coat} allows you to customize the final file by creating a {green <filename>-custom.js} file next to the file you want to customize.`,
    "",
    chalk`As an example, a configuration file named {green config.json} can be customized by placing a {green config.json-custom.js} file next to it.`,
    "The export will be merged into the file provided by coat:",
  ].join('\n')

  const maxWidth = usableTerminalSize.width;
  const borderConfig: boxen.Options = {
    dimBorder: true,
    padding: 1,
  };

  // Colorize JSON examples and put them into boxes
  const exampleConfigs = [
    // config.json from coat
    jsonColorizer(
      JSON.stringify({ coatConfig: "value from your coat template" }),
      { pretty: true }
    ),
    // config.json-custom.js
    `module.exports = ${jsonColorizer(
      JSON.stringify({
        customConfig: "value specified by you",
      }),
      { pretty: true }
    )}`,
    // Resulting config.json
    jsonColorizer(
      JSON.stringify({
        coatConfig: "value from your coat template",
        customConfig: "value specified by you",
      }),
      { pretty: true }
    ),
  ].map((exampleConfig) =>
    // place example config in a box and fill
    // the last line of the string to have
    // equally sized boxes
    boxen(fillLastLine(exampleConfig, maxWidth), borderConfig)
  );

  const text = [
    centerText("ðŸ’¡ Before you get started ðŸ’¡", maxWidth),
    "",
    wrapAnsi(customizationExplanation, maxWidth),
    "",
    chalk.dim("// config.json from coat"),
    exampleConfigs[0],
    "",
    chalk.dim("// config.json-custom.js"),
    exampleConfigs[1],
    "",
    chalk.dim("// config.json that will be placed"),
    exampleConfigs[2],
  ].join("\n");

  // TODO: See #52
  // Add link to customization documentation once it exists

  // Place customization help into a box
  const customizationTextBox = boxen(text, {
    ...borderConfig,
    float: "center",
  });

  console.log(customizationTextBox);
}
